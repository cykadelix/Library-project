// <auto-generated />
using System;
using Library_project.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Library_project.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230323030136_all")]
    partial class all
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Library_project.Data.Objects.Location", b =>
                {
                    b.Property<int>("Floor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Floor"));

                    b.Property<int>("Asile")
                        .HasColumnType("integer");

                    b.HasKey("Floor");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Library_project.Models.AudioBook", b =>
                {
                    b.Property<int>("AudioBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AudioBookId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Availability")
                        .HasColumnType("boolean");

                    b.Property<int>("Genre")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("Length")
                        .HasColumnType("time without time zone");

                    b.Property<int>("Media.id")
                        .HasColumnType("integer");

                    b.Property<string>("Narrrator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AudioBookId");

                    b.HasIndex("Media.id");

                    b.ToTable("AudioBook");
                });

            modelBuilder.Entity("Library_project.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookId"));

                    b.Property<string[]>("Author")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int[]>("Genres")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("ISBN")
                        .HasColumnType("integer");

                    b.Property<int>("Media.id")
                        .HasColumnType("integer");

                    b.Property<int>("PageCount")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("PublicDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("boolean");

                    b.HasKey("BookId");

                    b.HasIndex("Media.id");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Library_project.Models.Journal", b =>
                {
                    b.Property<int>("JournalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JournalId"));

                    b.Property<DateOnly>("DateReleased")
                        .HasColumnType("date");

                    b.Property<int>("Length")
                        .HasColumnType("integer");

                    b.Property<int>("Media.id")
                        .HasColumnType("integer");

                    b.Property<string>("Researchers")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("JournalId");

                    b.HasIndex("Media.id");

                    b.ToTable("Journal");
                });

            modelBuilder.Entity("Library_project.Models.Media", b =>
                {
                    b.Property<int>("mediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("mediaId"));

                    b.HasKey("mediaId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Library_project.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MovieId"));

                    b.Property<bool>("Availability")
                        .HasColumnType("boolean");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Genres")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("Length")
                        .HasColumnType("time without time zone");

                    b.Property<int>("Media.id")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("ReleasDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MovieId");

                    b.HasIndex("Media.id");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("Library_project.Models.AudioBook", b =>
                {
                    b.HasOne("Library_project.Models.Media", "Media")
                        .WithMany()
                        .HasForeignKey("Media.id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Library_project.Models.Book", b =>
                {
                    b.HasOne("Library_project.Models.Media", "Media")
                        .WithMany()
                        .HasForeignKey("Media.id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Library_project.Models.Journal", b =>
                {
                    b.HasOne("Library_project.Models.Media", "Media")
                        .WithMany()
                        .HasForeignKey("Media.id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Library_project.Models.Movie", b =>
                {
                    b.HasOne("Library_project.Models.Media", "Media")
                        .WithMany()
                        .HasForeignKey("Media.id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });
#pragma warning restore 612, 618
        }
    }
}
